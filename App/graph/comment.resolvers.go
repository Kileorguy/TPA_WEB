package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/Kileorguy/graph/model"
	"github.com/google/uuid"
)

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.CommentInput) (*model.Comment, error) {
	id := uuid.NewString()
	var comment = &model.Comment{
		ID:     id,
		UserID: input.UserID,
		PostID: input.PostID,
		Text:   input.Text,
	}
	r.DB.Create(&comment)
	err := r.DB.Preload("User").Preload("Post").First(&comment, "id = ?", id).Error
	_, _ = r.CreateNotificationID(ctx, input.UserID+" Comment in your post", comment.Post.UserID)

	return comment, err

	panic(fmt.Errorf("not implemented: CreateComment - createComment"))
}

// GetComment is the resolver for the getComment field.
func (r *queryResolver) GetComment(ctx context.Context, input string) ([]*model.Comment, error) {
	var comments []*model.Comment
	return comments, r.DB.Preload("User").Preload("Post").Find(&comments, "post_id = ?", input).Error
	panic(fmt.Errorf("not implemented: GetComment - getComment"))
}

// Reply is the resolver for the reply field.
func (r *commentResolver) Reply(ctx context.Context, obj *model.Comment) ([]*model.Reply, error) {
	var replies []*model.Reply
	return replies, r.DB.Preload("User").Find(&replies, "comment_id = ?", obj.ID).Error
	panic(fmt.Errorf("not implemented: Reply - reply"))
}

// LikeCount is the resolver for the likeCount field.
func (r *commentResolver) LikeCount(ctx context.Context, obj *model.Comment) (int, error) {
	panic(fmt.Errorf("not implemented: LikeCount - likeCount"))
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

type commentResolver struct{ *Resolver }
