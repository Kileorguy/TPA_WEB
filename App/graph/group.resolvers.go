package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/Kileorguy/graph/model"
	"github.com/google/uuid"
)

// CreateGroup is the resolver for the createGroup field.
func (r *mutationResolver) CreateGroup(ctx context.Context, title string, privacy string) (*model.Group, error) {
	ID := uuid.NewString()
	var group = &model.Group{
		ID:      ID,
		Title:   title,
		Privacy: privacy,
	}
	r.DB.Create(&group)
	return group, r.DB.Find(&group, "id = ?", ID).Error
	panic(fmt.Errorf("not implemented: CreateGroup - createGroup"))
}

// GetAllGroup is the resolver for the getAllGroup field.
func (r *queryResolver) GetAllGroup(ctx context.Context) ([]*model.Group, error) {
	var group []*model.Group
	return group, r.DB.Preload("Admin").Preload("Member").Preload("Member.User").Preload("Admin.User").Find(&group, "1 = 1").Error
	panic(fmt.Errorf("not implemented: GetAllGroup - getAllGroup"))
}

// GetGroupID is the resolver for the getGroupID field.
func (r *queryResolver) GetGroupID(ctx context.Context, groupID string) (*model.Group, error) {
	var group *model.Group
	return group, r.DB.First(&group, "id = ?", groupID).Error
	panic(fmt.Errorf("not implemented: GetGroupID - getGroupID"))
}

// Member is the resolver for the member field.
func (r *groupResolver) Member(ctx context.Context, obj *model.Group) ([]*model.GroupMember, error) {
	var member []*model.GroupMember
	return member, r.DB.Preload("User").Find(&member, "group_id = ? AND is_admin = ?", obj.ID, false).Error
	panic(fmt.Errorf("not implemented: Member - member"))
}

// Admin is the resolver for the admin field.
func (r *groupResolver) Admin(ctx context.Context, obj *model.Group) ([]*model.GroupMember, error) {
	var admin []*model.GroupMember
	return admin, r.DB.Preload("User").Find(&admin, "group_id = ? AND is_admin = ?", obj.ID, true).Error
	panic(fmt.Errorf("not implemented: Admin - admin"))
}

// Group returns GroupResolver implementation.
func (r *Resolver) Group() GroupResolver { return &groupResolver{r} }

type groupResolver struct{ *Resolver }
