package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/Kileorguy/graph/model"
	"github.com/Kileorguy/middleware"
	"github.com/google/uuid"
)

// CreateGroupFiles is the resolver for the createGroupFiles field.
func (r *mutationResolver) CreateGroupFiles(ctx context.Context, groupID string, link string, fileName string) (*model.GroupFiles, error) {
	token := ctx.Value("token").(string)
	email, _ := middleware.JWT_decrypt(token)
	var files []*model.GroupFiles
	var count int64
	for {
		r.DB.Find(&files, "group_id = ? AND file_name = ?", groupID, fileName).Count(&count)
		fmt.Println("Jumlah File Nama sama : ", count)
		if count > 0 {
			var split = strings.Split(fileName, ".")

			fileName = split[0] + " (" + strconv.Itoa(int(count)) + ")." + split[1]
			fmt.Println("Nama File Jadi : ", fileName)
		}
		if count == 0 {
			break
		}
	}
	id := uuid.NewString()
	var file = &model.GroupFiles{
		ID:       id,
		GroupID:  groupID,
		UserID:   email,
		Link:     link,
		Time:     time.Now(),
		FileName: fileName,
	}
	var fileQ *model.GroupFiles
	r.DB.Create(&file)
	return fileQ, r.DB.Find(&fileQ, "id = ?", id).Error
	panic(fmt.Errorf("not implemented: CreateGroupFiles - createGroupFiles"))
}

// DeleteGroupFiles is the resolver for the deleteGroupFiles field.
func (r *mutationResolver) DeleteGroupFiles(ctx context.Context, id string) (*model.GroupFiles, error) {
	var file *model.GroupFiles
	r.DB.Find("id = ?", id)
	err := r.DB.Delete(&file).Error
	return nil, err
}

// SetLinkInDb is the resolver for the setLinkInDB field.
func (r *mutationResolver) SetLinkInDb(ctx context.Context, id string, link string) (*model.GroupFiles, error) {
	var file *model.GroupFiles
	r.DB.Find(&file, "id = ?", id)
	file.Link = link
	r.DB.Save(&file)
	return file, nil
}

// GetGroupFiles is the resolver for the getGroupFiles field.
func (r *queryResolver) GetGroupFiles(ctx context.Context, groupID string) ([]*model.GroupFiles, error) {
	var files []*model.GroupFiles
	err := r.DB.Preload("User").Find(&files, "group_id = ? ", groupID).Error
	return files, err
}
