package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/Kileorguy/graph/model"
	"github.com/Kileorguy/middleware"
	"github.com/google/uuid"
)

// CreateGroupMember is the resolver for the createGroupMember field.
func (r *mutationResolver) CreateGroupMember(ctx context.Context, input model.InputGroupMember) (*model.GroupMember, error) {
	ID := uuid.NewString()
	var member = &model.GroupMember{
		ID:      ID,
		UserID:  input.UserID,
		GroupID: input.GroupID,
		IsAdmin: input.IsAdmin,
	}
	r.DB.Create(&member)
	return member, r.DB.Preload("User").Preload("Group").Find(&member, "id = ?", ID).Error
	panic(fmt.Errorf("not implemented: CreateGroupMember - createGroupMember"))
}

// LeaveGroup is the resolver for the leaveGroup field.
func (r *mutationResolver) LeaveGroup(ctx context.Context, groupID string) (*model.GroupMember, error) {
	token := ctx.Value("token").(string)
	email, _ := middleware.JWT_decrypt(token)

	var member *model.GroupMember
	var otherMember []*model.GroupMember

	r.DB.Find(&member, "group_id = ? AND user_id =?", groupID, email)
	if member.IsAdmin == false {
		r.DB.Delete(&member)
	} else {
		var countMember int64 = 0
		var countAdmin int64 = 1

		r.DB.Find(&otherMember, "group_id = ? AND is_admin = false", groupID).Count(&countMember)
		r.DB.Find(&otherMember, "group_id = ? AND is_admin = true", groupID).Count(&countAdmin)

		if countMember == 0 {
			if countAdmin == 1 {
				r.DB.Delete(&member)
			} else {
				fmt.Println("ADA ADMIN LAIN BANG", countMember, "-", countAdmin)

			}
		} else {
			fmt.Println("ADA MEMBER LAIN BANG", countMember, "-", countAdmin)
		}

		if countAdmin > 1 {
			r.DB.Delete(&member)
			fmt.Println("Ada Admin lain, apuss")
		} else {
			fmt.Println("ADA MEMBER LAIN BANG", countMember, "-", countAdmin)
		}
	}

	var group *model.Group
	r.DB.Find(&group, "id = ?", groupID)
	var countAll int64 = 0
	r.DB.Find(&otherMember, "group_id = ?", groupID).Count(&countAll)
	fmt.Println("VALIDATE JUMLAH ORANG DI DALEM", countAll)
	if countAll == 0 {
		r.DB.Delete(group)
		fmt.Println("GROUP DI DELETE")
	}

	return nil, nil
	panic(fmt.Errorf("not implemented: LeaveGroup - leaveGroup"))
}

// SetToAdmin is the resolver for the setToAdmin field.
func (r *mutationResolver) SetToAdmin(ctx context.Context, userID string, groupID string) (*model.GroupMember, error) {
	var member *model.GroupMember
	r.DB.First(&member, "user_id = ? and group_id = ?", userID, groupID)
	member.IsAdmin = true
	err := r.DB.Save(&member).Error
	return member, err
	panic(fmt.Errorf("not implemented: SetToAdmin - setToAdmin"))
}

// KickMember is the resolver for the kickMember field.
func (r *mutationResolver) KickMember(ctx context.Context, userID string, groupID string) (*model.GroupMember, error) {
	var member *model.GroupMember
	r.DB.First(&member, "user_id = ? and group_id = ?", userID, groupID)
	r.DB.Delete(&member)
	return nil, nil

	panic(fmt.Errorf("not implemented: KickMember - kickMember"))
}

// GetSelfGroups is the resolver for the getSelfGroups field.
func (r *queryResolver) GetSelfGroups(ctx context.Context) ([]*model.Group, error) {
	token := ctx.Value("token").(string)
	email, _ := middleware.JWT_decrypt(token)

	var groups []string
	err := r.DB.Model(&model.GroupMember{}).Where("user_id = ?", email).
		Select("group_id").Find(&groups).Error
	if err != nil {
		return nil, nil
	}

	var group []*model.Group
	return group, r.DB.Find(&group, "id IN (?)", groups).Error

	panic(fmt.Errorf("not implemented: GetSelfGroups - getSelfGroups"))
}

// GetRoleByAuth is the resolver for the getRoleByAuth field.
func (r *queryResolver) GetRoleByAuth(ctx context.Context, groupID string) (*model.GroupMember, error) {
	token := ctx.Value("token").(string)
	email, _ := middleware.JWT_decrypt(token)

	var role *model.GroupMember

	return role, r.DB.First(&role, "group_id = ? AND user_id = ?", groupID, email).Error

	panic(fmt.Errorf("not implemented: GetRoleByAuth - getRoleByAuth"))
}
