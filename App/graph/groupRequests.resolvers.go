package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/Kileorguy/graph/model"
	"github.com/google/uuid"
)

// CreateRequest is the resolver for the createRequest field.
func (r *mutationResolver) CreateRequest(ctx context.Context, groupID string, userID string) (*model.GroupRequest, error) {
	id := uuid.NewString()
	var req = &model.GroupRequest{
		ID:      id,
		GroupID: groupID,
		UserID:  userID,
	}

	err := r.DB.Create(&req).Error
	return req, err

	panic(fmt.Errorf("not implemented: CreateRequest - createRequest"))
}

// AcceptRequest is the resolver for the acceptRequest field.
func (r *mutationResolver) AcceptRequest(ctx context.Context, groupID string, userID string) (*model.GroupRequest, error) {
	var req *model.GroupRequest
	err := r.DB.First(&req, "user_id = ? AND group_id = ?", userID, groupID).Error
	if err != nil {
		return nil, nil
	}

	var groupMember = model.InputGroupMember{
		UserID:  userID,
		GroupID: groupID,
		IsAdmin: false,
	}

	_, err1 := r.CreateGroupMember(ctx, groupMember)
	if err1 != nil {
		return nil, err
	}

	r.DB.Delete(&req)
	return nil, err

	panic(fmt.Errorf("not implemented: AcceptRequest - acceptRequest"))
}

// DeleteRequest is the resolver for the deleteRequest field.
func (r *mutationResolver) DeleteRequest(ctx context.Context, groupID string, userID string) (*model.GroupRequest, error) {
	var req *model.GroupRequest
	err := r.DB.First(&req, "user_id = ? AND group_id = ?", userID, groupID).Error
	if err != nil {
		return nil, nil
	}
	r.DB.Delete(&req)
	return nil, nil
	panic(fmt.Errorf("not implemented: DeleteRequest - deleteRequest"))
}

// GetGroupRequest is the resolver for the getGroupRequest field.
func (r *queryResolver) GetGroupRequest(ctx context.Context, groupID string) ([]*model.GroupRequest, error) {
	var requests []*model.GroupRequest
	err := r.DB.Preload("User").Find(&requests, "group_id = ?", groupID).Error
	return requests, err
	panic(fmt.Errorf("not implemented: GetGroupRequest - getGroupRequest"))
}
