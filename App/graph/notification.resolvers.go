package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/Kileorguy/graph/model"
	"github.com/Kileorguy/middleware"
	"github.com/google/uuid"
)

// CreateNotification is the resolver for the createNotification field.
func (r *mutationResolver) CreateNotification(ctx context.Context, input string) (*model.Notification, error) {
	ID := uuid.NewString()
	token := ctx.Value("token").(string)
	email, _ := middleware.JWT_decrypt(token)
	var Notif = &model.Notification{
		ID:     ID,
		UserID: email,
		Text:   input,
	}
	return Notif, r.DB.Create(&Notif).Error
	panic(fmt.Errorf("not implemented: CreateNotification - createNotification"))
}

// CreateNotificationID is the resolver for the createNotificationID field.
func (r *mutationResolver) CreateNotificationID(ctx context.Context, input string, userID string) (*model.Notification, error) {
	ID := uuid.NewString()

	var Notif = &model.Notification{
		ID:     ID,
		UserID: userID,
		Text:   input,
	}
	return Notif, r.DB.Create(&Notif).Error
	panic(fmt.Errorf("not implemented: CreateNotificationID - createNotificationID"))
}

// GetNotification is the resolver for the getNotification field.
func (r *queryResolver) GetNotification(ctx context.Context) ([]*model.Notification, error) {
	var Notif []*model.Notification
	token := ctx.Value("token").(string)
	email, _ := middleware.JWT_decrypt(token)

	fmt.Println(email)

	return Notif, r.DB.Preload("User").Find(&Notif, "user_id = ?", email).Error
}
