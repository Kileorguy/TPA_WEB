package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/Kileorguy/graph/model"
	"github.com/Kileorguy/middleware"
	"github.com/google/uuid"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	ID := uuid.NewString()

	post := &model.Post{
		ID:      ID,
		UserID:  input.UserID,
		Text:    input.Text,
		Privacy: input.Privacy,
		GroupID: "",
	}
	r.DB.Save(&post)
	err := r.DB.Preload("User").First(&post, "id = ?", ID).Error
	//err :=  r.DB.First(&post, "id = ?",ID).Error
	return post, err

	//return post, r.DB.Save(&post).Error
	//panic("hehehe")
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (*model.Post, error) {
	var data *model.Post
	return nil, r.DB.Delete(&data, "id = ?", id).Error
	panic(fmt.Errorf("not implemented: DeletePost - deletePost"))
}

// CreatePostGroup is the resolver for the createPostGroup field.
func (r *mutationResolver) CreatePostGroup(ctx context.Context, input model.NewPost, groupID string) (*model.Post, error) {
	ID := uuid.NewString()

	post := &model.Post{
		ID:      ID,
		UserID:  input.UserID,
		Text:    input.Text,
		Privacy: input.Privacy,
		GroupID: groupID,
	}
	r.DB.Save(&post)
	err := r.DB.Preload("User").First(&post, "id = ?", ID).Error
	//err :=  r.DB.First(&post, "id = ?",ID).Error
	return post, err
	panic(fmt.Errorf("not implemented: CreatePostGroup - createPostGroup"))
}

// LikeCount is the resolver for the likeCount field.
func (r *postResolver) LikeCount(ctx context.Context, obj *model.Post) (int, error) {
	var likes int64
	return int(likes), r.DB.Find(&model.PostLike{}, "post_id = ?", obj.ID).Count(&likes).Error
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *model.Post) ([]*model.Comment, error) {
	var comments []*model.Comment
	return comments, r.DB.Preload("User").Preload("Post").Find(&comments, "post_id = ?", obj.ID).Error
	panic(fmt.Errorf("not implemented: GetComment - getComment"))
}

// CommentCount is the resolver for the commentCount field.
func (r *postResolver) CommentCount(ctx context.Context, obj *model.Post) (int, error) {
	var comments []*model.Comment
	var commentCount int64
	return int(commentCount), r.DB.Preload("User").Preload("Post").Find(&comments, "post_id = ?", obj.ID).Count(&commentCount).Error
}

// Files is the resolver for the files field.
func (r *postResolver) Files(ctx context.Context, obj *model.Post) ([]*model.PostFile, error) {
	var files []*model.PostFile
	return files, r.DB.Find(&files, "post_id = ?", obj.ID).Error

	//panic(fmt.Errorf("not implemented: Files - files"))
}

// GetAllPost is the resolver for the getAllPost field.
func (r *queryResolver) GetAllPost(ctx context.Context) ([]*model.Post, error) {

	token := ctx.Value("token").(string)
	email, _ := middleware.JWT_decrypt(token)

	var friends []string

	err := r.DB.Model(&model.Friends{}).Where("(sender_id = ? OR receiver_id = ?) AND accepted = ?", email, email, true).
		Select("CASE WHEN sender_id = ? THEN receiver_id ELSE sender_id END", email).Find(&friends).Error

	if err != nil {
		return nil, err
	}
	friends = append(friends, email)

	var posts []*model.Post

	return posts, r.DB.Preload("User").Find(&posts, "user_id IN ?", friends).Error
}

// GetSearchedPost is the resolver for the getSearchedPost field.
func (r *queryResolver) GetSearchedPost(ctx context.Context, input string) ([]*model.Post, error) {
	var posts []*model.Post
	input = "%" + input + "%"
	return posts, r.DB.Preload("User").Where("text LIKE ?", input).Find(&posts).Error
}

// GetUserPost is the resolver for the getUserPost field.
func (r *queryResolver) GetUserPost(ctx context.Context, input string) ([]*model.Post, error) {
	var posts []*model.Post

	return posts, r.DB.Preload("User").Find(&posts, "user_id IN (?)", input).Error
	panic(fmt.Errorf("not implemented: GetUserPost - getUserPost"))
}

// GetUserIDPost is the resolver for the getUserIdPost field.
func (r *queryResolver) GetUserIDPost(ctx context.Context, postID string) ([]*model.Post, error) {
	var user *model.User
	r.DB.Find(&user, "id = ?", postID)

	var posts []*model.Post
	fmt.Println(user.Email)
	//r.DB.Find(&posts, "user_id = ?", user.Email)
	//print("posttss", posts)
	return posts, r.DB.Preload("User").Find(&posts, "user_id = ?", user.Email).Error
	panic(fmt.Errorf("not implemented: GetUserPost - getUserPost"))
}

// GetPostGroupID is the resolver for the getPostGroupID field.
func (r *queryResolver) GetPostGroupID(ctx context.Context, groupID string) ([]*model.Post, error) {
	var posts []*model.Post
	return posts, r.DB.Preload("User").Find(&posts, "group_id = ?", groupID).Error
	panic(fmt.Errorf("not implemented: GetPostGroupID - getPostGroupID"))
}

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

type postResolver struct{ *Resolver }
