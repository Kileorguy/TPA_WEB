package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/Kileorguy/graph/model"
	"github.com/Kileorguy/middleware"
	"github.com/google/uuid"
)

// CreateReels is the resolver for the createReels field.
func (r *mutationResolver) CreateReels(ctx context.Context, input string, text string) (*model.Reels, error) {
	token := ctx.Value("token").(string)
	email, _ := middleware.JWT_decrypt(token)
	fmt.Println(email)
	ID := uuid.NewString()

	var reels *model.Reels

	err := r.DB.First(&reels, "user_id = ?", email).Error
	if err == nil {
		fmt.Println("GOT ==================----")
		reels.Link = input
		reels.Text = text
		return reels, r.DB.Save(&reels).Error
	} else {
		fmt.Println("error ==============================")
		reels = &model.Reels{
			ID:     ID,
			UserID: email,
			Link:   input,
			Text:   text,
		}
		r.DB.Save(&reels)
		err = r.DB.Preload("User").First(&reels, "id = ?", ID).Error
		return reels, err
	}

	panic("hehe")
}

// DeleteSelfReels is the resolver for the deleteSelfReels field.
func (r *mutationResolver) DeleteSelfReels(ctx context.Context) (*model.Reels, error) {
	token := ctx.Value("token").(string)
	email, _ := middleware.JWT_decrypt(token)

	var data *model.Reels
	return nil, r.DB.Delete(&data, "user_id = ?", email).Error
	panic(fmt.Errorf("not implemented: DeleteSelfReels - deleteSelfReels"))
}

// GetAllReels is the resolver for the getAllReels field.
func (r *queryResolver) GetAllReels(ctx context.Context) ([]*model.Reels, error) {
	var reels []*model.Reels
	return reels, r.DB.Preload("User").Find(&reels).Error
}

// GetSelfReels is the resolver for the getSelfReels field.
func (r *queryResolver) GetSelfReels(ctx context.Context) (*model.Reels, error) {
	token := ctx.Value("Email").(string)
	email, _ := middleware.JWT_decrypt(token)

	var reels *model.Reels
	return reels, r.DB.Preload("User").First(&reels, "user_id = ? ", email).Error

	panic(fmt.Errorf("not implemented: GetSelfReels - getSelfReels"))
}

// GetReelsByEmail is the resolver for the getReelsByEmail field.
func (r *queryResolver) GetReelsByEmail(ctx context.Context, input string) (*model.Reels, error) {
	var reels *model.Reels
	return reels, r.DB.Preload("User").First(&reels, "user_id = ? ", input).Error
	panic(fmt.Errorf("not implemented: GetReelsByEmail - getReelsByEmail"))
}

// LikeCount is the resolver for the LikeCount field.
func (r *reelsResolver) LikeCount(ctx context.Context, obj *model.Reels) (int, error) {
	var likes int64
	return int(likes), r.DB.Find(&model.ReelsLike{}, "reels_id = ?", obj.ID).Count(&likes).Error
}

// Comments is the resolver for the Comments field.
func (r *reelsResolver) Comments(ctx context.Context, obj *model.Reels) ([]*model.ReelsComments, error) {
	var comment []*model.ReelsComments

	return comment, r.DB.Preload("User").Preload("Reel").Find(&comment, "reels_id = ?", obj.ID).Error

	panic(fmt.Errorf("not implemented: Comments - Comments"))
}

// CommentCount is the resolver for the CommentCount field.
func (r *reelsResolver) CommentCount(ctx context.Context, obj *model.Reels) (int, error) {
	var comment []*model.ReelsComments
	var count int64
	return int(count), r.DB.Preload("User").Preload("Reel").Find(&comment, "reels_id = ?", obj.ID).Count(&count).Error

	panic(fmt.Errorf("not implemented: CommentCount - CommentCount"))
}

// Reels returns ReelsResolver implementation.
func (r *Resolver) Reels() ReelsResolver { return &reelsResolver{r} }

type reelsResolver struct{ *Resolver }
