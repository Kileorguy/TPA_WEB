package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/Kileorguy/graph/model"
	"github.com/Kileorguy/middleware"
	"github.com/google/uuid"
)

// CreateReelsComment is the resolver for the createReelsComment field.
func (r *mutationResolver) CreateReelsComment(ctx context.Context, input model.RComment) (*model.ReelsComments, error) {
	token := ctx.Value("token").(string)
	email, _ := middleware.JWT_decrypt(token)
	ID := uuid.NewString()
	var comment = &model.ReelsComments{
		ID:      ID,
		UserID:  email,
		ReelsID: input.ReelsID,
		Text:    input.Text,
	}
	r.DB.Create(&comment)
	err := r.DB.Preload("User").Preload("Reel").First(&comment, "id = ?", ID).Error
	_, _ = r.CreateNotificationID(ctx, email+" Comment in your reels", comment.Reel.UserID)

	return comment, err
	panic(fmt.Errorf("not implemented: CreateReelsComment - createReelsComment"))
}

// GetReelsComment is the resolver for the getReelsComment field.
func (r *queryResolver) GetReelsComment(ctx context.Context, input string) ([]*model.ReelsComments, error) {
	panic(fmt.Errorf("not implemented: GetReelsComment - getReelsComment"))
}

// Reply is the resolver for the reply field.
func (r *reelsCommentsResolver) Reply(ctx context.Context, obj *model.ReelsComments) ([]*model.Reply, error) {
	panic(fmt.Errorf("not implemented: Reply - reply"))
}

// LikeCount is the resolver for the likeCount field.
func (r *reelsCommentsResolver) LikeCount(ctx context.Context, obj *model.ReelsComments) (int, error) {
	panic(fmt.Errorf("not implemented: LikeCount - likeCount"))
}

// ReelsComments returns ReelsCommentsResolver implementation.
func (r *Resolver) ReelsComments() ReelsCommentsResolver { return &reelsCommentsResolver{r} }

type reelsCommentsResolver struct{ *Resolver }
