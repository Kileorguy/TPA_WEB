package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"

	"github.com/Kileorguy/graph/model"
	"github.com/Kileorguy/middleware"
	"github.com/google/uuid"
)

// AddReply is the resolver for the addReply field.
func (r *mutationResolver) AddReply(ctx context.Context, input model.ReplyInput) (*model.Reply, error) {
	token := ctx.Value("token").(string)
	email, _ := middleware.JWT_decrypt(token)

	id := uuid.NewString()
	var reply = &model.Reply{
		ID:        id,
		UserID:    email,
		CommentID: input.CommentID,
		Text:      input.Text,
	}
	r.DB.Create(&reply)
	err := r.DB.Preload("User").Preload("Comment").First(&reply, "id = ?", id).Error
	_, _ = r.CreateNotificationID(ctx, email+" replied your comment", reply.Comment.UserID)

	return reply, err
	panic("hehe")
}

// LikeCount is the resolver for the likeCount field.
func (r *replyResolver) LikeCount(ctx context.Context, obj *model.Reply) (int, error) {
	panic(fmt.Errorf("not implemented: LikeCount - likeCount"))
}

// Reply returns ReplyResolver implementation.
func (r *Resolver) Reply() ReplyResolver { return &replyResolver{r} }

type replyResolver struct{ *Resolver }
