package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/Kileorguy/graph/model"
	"github.com/Kileorguy/middleware"
	"github.com/google/uuid"
)

// CreatePhotoStory is the resolver for the createPhotoStory field.
func (r *mutationResolver) CreatePhotoStory(ctx context.Context, input model.NewPhotoStory) (*model.Story, error) {
	token := ctx.Value("token").(string)
	email, _ := middleware.JWT_decrypt(token)
	id := uuid.NewString()
	var story = &model.Story{
		UserID:    email,
		ID:        id,
		Link:      input.Link,
		CreatedAt: time.Now(),
	}
	r.DB.Create(&story)
	return story, r.DB.Preload("User").Find(&story, "id = ?", id).Error

	panic(fmt.Errorf("not implemented: CreatePhotoStory - createPhotoStory"))
}

// CreateTextStory is the resolver for the createTextStory field.
func (r *mutationResolver) CreateTextStory(ctx context.Context, input model.NewTextStory) (*model.Story, error) {
	token := ctx.Value("token").(string)
	email, _ := middleware.JWT_decrypt(token)
	id := uuid.NewString()
	var story = &model.Story{
		UserID:          email,
		ID:              id,
		Text:            input.Text,
		TextColor:       input.TextColor,
		BackgroundColor: input.BackgroundColor,
		CreatedAt:       time.Now(),
	}
	r.DB.Create(&story)
	return story, r.DB.Preload("User").Find(&story, "id = ?", id).Error
	panic(fmt.Errorf("not implemented: CreateTextStory - createTextStory"))
}

// Validate24h is the resolver for the validate24H field.
func (r *mutationResolver) Validate24h(ctx context.Context) (bool, error) {
	var stories []*model.Story
	r.DB.Find(&stories, "1=1")
	currTime := time.Now()
	for i := 0; i < len(stories); i++ {
		var story *model.Story
		story = stories[i]
		timeDiff := currTime.Sub(story.CreatedAt)
		if timeDiff >= (24 * time.Hour) {
			r.DB.Delete(&story)
		}
	}
	return true, nil
	panic(fmt.Errorf("not implemented: Validate24h - validate24H"))
}

// GetFriendsStories is the resolver for the getFriendsStories field.
func (r *queryResolver) GetFriendsStories(ctx context.Context) ([]*model.Story, error) {
	token := ctx.Value("token").(string)
	email, _ := middleware.JWT_decrypt(token)

	var friends []string

	err := r.DB.Model(&model.Friends{}).Where("(sender_id = ? OR receiver_id = ?) AND accepted = ?", email, email, true).
		Select("CASE WHEN sender_id = ? THEN receiver_id ELSE sender_id END", email).Find(&friends).Error

	if err != nil {
		return nil, err
	}
	friends = append(friends, email)

	var stories []*model.Story
	err1 := r.DB.Preload("User").Find(&stories, "user_id IN (?)", friends).Error
	return stories, err1

	panic(fmt.Errorf("not implemented: GetFriendsStories - getFriendsStories"))
}
